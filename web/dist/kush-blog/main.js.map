{"version":3,"sources":["./src/app/app-routing.module.ts","./src/app/theme.service.ts","./src/app/storage.service.ts","./src/app/models/author.ts","./src/app/models/theme.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.component.scss","./src/app/playground.service.ts","./src/app/playground/playground.component.ts","./src/app/playground/playground.component.html","./src/app/playground/playground.component.scss","./src/app/articles.service.ts","./src/app/models/category.ts","./src/app/models/article.ts","./src/app/articles/articles.component.ts","./src/app/articles/articles.component.html","./src/app/articles/articles.component.scss","./src/app/landing/landing.component.ts","./src/app/landing/landing.component.html","./src/app/landing/landing.component.scss","./src/app/graphql.module.ts","./src/app/article/article.component.ts","./src/app/article/article.component.html","./src/app/article/article.component.scss","./src/app/compile.directive.ts","./src/app/auth.interceptor.ts","./src/app/authentication.service.ts","./src/app/models/session.ts","./src/app/models/user.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.component.scss","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["AppRoutingModule","imports","forRoot","exports","themeChanged","theme","this","emit","providedIn","StorageService","router","currentSession","localStorageService","localStorage","loadSessionData","session","setItem","JSON","stringify","sessionStr","getItem","parse","removeItem","getCurrentSession","user","getCurrentToken","token","removeCurrentSession","Author","author","_author","id","username","data","_theme","name","CopyFrom","landingTemplate","articlesTemplate","articleTemplate","landingQuery","articlesQuery","articleQuery","key","value","apollo","storageService","themeService","title","loading","gqlTest","allThemesQuery","subscribe","query","resp","themeToUpdate","themeList","filter","t","watchQuery","valueChanges","result","Object","keys","dataList","map","error","selector","template","fileChanged","language","currentKey","currentLanguage","differs","playgroundService","editorOptions","UPDATE_THEME","CREATE_THEME","differ","find","create","themeID","code","getPropertyByName","change","diff","forEachChangedItem","item","setPropertyByName","currentValue","setFile","themes","setTheme","authorID","mutate","mutation","variables","prompt","getCurrentUser","CreateTheme","push","articleChanged","articleID","currentArticleID","Category","category","_category","article","_article","content","brief","createdAt","articleService","setArticle","articles","LandingComponent","playground","GraphQLModule","providers","provide","httpLink","http","uri","ws","options","reconnect","link","definition","kind","operation","cache","deps","articlesService","getArticle","vcRef","compiler","compile","compRef","updateProperties","Error","clear","component","createDynamicComponent","module","createDynamicModule","compileModuleAndAllComponentsAsync","then","moduleWithFactories","compFactory","componentFactories","x","componentType","createComponent","catch","console","log","prop","compileContext","instance","CustomDynamicComponent","DynamicModule","declarations","schemas","req","next","request","isAuthenticated","clone","setHeaders","authorization","handle","pipe","catchError","err","status","navigateByUrl","throwError","LOGIN_MUTATION","emailAddress","password","Session","User","fullName","role","formBuilder","authenticationService","message","loginForm","group","required","submitted","valid","login","correctLogin","Login","_body","setCurrentSession","AppModule","useClass","multi","bootstrap","bootstrapModule","webpackEmptyAsyncContext","Promise","resolve","e"],"mappings":"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","file":"main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { EventEmitter, Injectable } from '@angular/core';\nimport { Theme } from './models/theme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n\n  public themeChanged:EventEmitter<Theme> = new EventEmitter();\n\n  constructor() { }\n\n  public setTheme(theme:Theme): void {\n    this.themeChanged.emit(theme);\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport { Router } from '@angular/router';\nimport {Session} from \"./models/session\";\nimport {User} from \"./models/user\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private localStorageService;\n  private currentSession : Session = null;\n\n  constructor(private router: Router) {\n    this.localStorageService = localStorage;\n    this.currentSession = this.loadSessionData();\n  }\n\n  setCurrentSession(session: Session): void {\n    this.currentSession = session;\n    this.localStorageService.setItem('currentUser', JSON.stringify(session));\n  }\n\n  loadSessionData(): Session{\n    var sessionStr = this.localStorageService.getItem('currentUser');\n    return (sessionStr) ? <Session> JSON.parse(sessionStr) : null;\n  }\n\n  getCurrentSession(): Session {\n    return this.currentSession;\n  }\n\n  removeCurrentSession(): void {\n    this.localStorageService.removeItem('currentUser');\n    this.currentSession = null;\n  }\n\n  getCurrentUser(): User {\n    var session: Session = this.getCurrentSession();\n    return (session && session.user) ? session.user : null;\n  };\n\n  isAuthenticated(): boolean {\n    return (this.getCurrentToken() != null) ? true : false;\n  };\n\n  getCurrentToken(): string {\n    var session = this.getCurrentSession();\n    return (session && session.token) ? session.token : null;\n  };\n\n  logout(): void{\n    this.removeCurrentSession();\n  }\n\n}\n","export class Author {\n\n  static CopyFrom(author: any):Author {\n    let _author = new Author();\n    _author.id = author.id;\n    _author.username = author.username;\n    return _author;\n  }\n\n  public id!: string;\n  public username!: string;\n\n\n}\n","import { Author } from './author';\n\nexport class Theme {\n\n\n  static CopyFrom(data: any): Theme {\n    let _theme = new Theme();\n    _theme.name = data.name;\n    _theme.id = data.id;\n\n    if (data.author) {\n      _theme.author = Author.CopyFrom(data.author);\n    }\n\n    _theme.landingTemplate = data.landingTemplate;\n    _theme.articlesTemplate = data.articlesTemplate;\n    _theme.articleTemplate = data.articleTemplate;\n    _theme.landingQuery = data.landingQuery;\n    _theme.articlesQuery = data.articlesQuery;\n    _theme.articleQuery = data.articleQuery;\n    return _theme;\n  }\n\n  public id!:string;\n  public name!: string;\n  public author!: Author;\n\n  public landingTemplate!: string;\n  public articlesTemplate!: string;\n  public articleTemplate!: string;\n\n  public landingQuery!: string;\n  public articlesQuery!: string;\n  public articleQuery!: string;\n\n\n  public getPropertyByName(key: string): string {\n    switch(key) {\n      case 'landingTemplate': {\n        return this.landingTemplate;\n      }\n      case 'articlesTemplate': {\n        return this.articlesTemplate;\n      }\n      case 'articleTemplate': {\n        return this.articleTemplate;\n      }\n      case 'articlesQuery': {\n        return this.articlesQuery;\n      }\n      case 'articleQuery': {\n        return this.articleQuery;\n      }\n      case 'landingQuery': {\n        return this.landingQuery;\n      }\n    }\n    return \"\";\n  }\n\n  public setPropertyByName(key: string, value: string): void {\n    switch(key) {\n      case 'landingTemplate': {\n         this.landingTemplate = value;\n        break;\n      }\n      case 'articlesTemplate': {\n         this.articlesTemplate = value;\n        break;\n      }\n      case 'articleTemplate': {\n         this.articleTemplate = value;\n        break;\n      }\n      case 'articlesQuery': {\n         this.articlesQuery = value;\n        break;\n      }\n      case 'articleQuery': {\n         this.articleQuery = value;\n        break;\n      }\n      case 'landingQuery': {\n         this.landingQuery = value;\n      }\n    }\n  }\n}\n","import { ThemeService } from './theme.service';\nimport { StorageService } from './storage.service';\nimport { Component, OnInit } from '@angular/core';\nimport {Apollo, gql} from 'apollo-angular';\nimport { Theme } from './models/theme';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent implements OnInit {\n  public title = 'kush-blog';\n\n  public loading = true;\n  public error: any;\n\n  private gqlTest:string = `\n  {\n    GetThemeByName(name: \"Original\") {\n      message\n      status\n      data {\n        id\n        name\n        landingTemplate\n        landingQuery\n        articlesQuery\n        articlesTemplate\n        articleQuery\n        articleTemplate\n        author {\n          id\n          username\n        }\n      }\n    }\n  }\n`\n  private allThemesQuery:string = `\n    query getAllThemes{\n      GetAllThemes {\n        dataList {\n          id\n          name\n          landingQuery\n          landingTemplate\n          articleQuery\n          articleTemplate\n          articlesQuery\n          articlesTemplate\n          author {\n            id\n            username\n            emailAddress\n          }\n        }\n    }\n}\n`\n\n\n\n  public theme!: Theme;\n\n  public themeList!: Theme[];\n\n  constructor(private apollo: Apollo, public storageService:StorageService, private themeService:ThemeService) {}\n\n  ngOnInit() {\n\n    this.themeService.themeChanged.subscribe(\n      (theme:Theme) => {\n        this.theme = theme;\n      }\n    );\n\n    this.apollo.subscribe({\n            query: gql`\n              subscription themeChanged{\n                themeChanged{\n                    id\n                    name\n                    landingTemplate\n                    landingQuery\n                    articlesQuery\n                    articlesTemplate\n                    articleQuery\n                    articleTemplate\n                }\n            }`\n    }).subscribe((resp:any) => {\n      let themeToUpdate:Theme = this.themeList.filter(t => t.id === resp?.data?.themeChanged?.id)[0];\n\n      if (themeToUpdate) {\n        themeToUpdate.articleQuery = resp?.data?.themeChanged?.articleQuery;\n        themeToUpdate.articleTemplate = resp?.data?.themeChanged?.articleTemplate;\n        themeToUpdate.articlesQuery = resp?.data?.themeChanged?.articlesQuery;\n        themeToUpdate.articlesTemplate = resp?.data?.themeChanged?.articlesTemplate;\n        themeToUpdate.landingQuery = resp?.data?.themeChanged?.landingQuery;\n        themeToUpdate.landingTemplate = resp?.data?.themeChanged?.landingTemplate;\n      }\n    });\n\n\n    this.apollo\n      .watchQuery({\n        query: gql(this.allThemesQuery),\n      })\n      .valueChanges.subscribe((result: any) => {\n\n        this.themeList = (result?.data[Object.keys(result?.data)[0]].dataList).map((theme:any) => { return Theme.CopyFrom(theme)}) ;\n\n        if (!this.theme) {\n          this.theme = this.themeList[0];\n        }\n\n        this.loading = result.loading;\n        this.error = result.error;\n      });\n  }\n\n}\n","export default \"<div *ngIf=\\\"loading\\\">\\r\\n  <div class=\\\"fixed inset-0 text-white flex flex-col justify-center items-center bg-gray-900\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-12 w-full mb-2\\\" stroke=\\\"#fff\\\" viewBox=\\\"0 0 38 38\\\">\\r\\n      <g transform=\\\"translate(1 1)\\\" stroke-width=\\\"2\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\r\\n        <circle stroke-opacity=\\\".5\\\" cx=\\\"18\\\" cy=\\\"18\\\" r=\\\"18\\\" />\\r\\n        <path d=\\\"M36 18c0-9.94-8.06-18-18-18\\\">\\r\\n          <animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 18 18\\\" to=\\\"360 18 18\\\" dur=\\\"1s\\\"\\r\\n            repeatCount=\\\"indefinite\\\" />\\r\\n        </path>\\r\\n      </g>\\r\\n      <style id=\\\"stylus-1\\\" type=\\\"text/css\\\"></style>\\r\\n    </svg>\\r\\n    <span class=\\\"font-mono font-bold\\\">_loading</span>\\r\\n  </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"error\\\">\\r\\n  <div class=\\\"fixed inset-0 text-white flex flex-col justify-center items-center bg-gray-900\\\">\\r\\n    <span>Error :(</span>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"theme\\\" class=\\\"overflow-hidden relative max-h-screen\\\">\\r\\n  <div\\r\\n    class=\\\"relative flex items-center justify-between px-3 top-0 left-0 right-0 bg-gray-900 py-1 z-50 border-b border-gray-800\\\">\\r\\n    <h3 class=\\\"font-mono flex justify-start items-center font-bold text-2xl text-white\\\">\\r\\n      Kush<span class=\\\"opacity-50\\\">Team</span>\\r\\n      <span class=\\\"mx-2 bg-indigo-700 text-sm px-2 py-1 rounded-md\\\">.dev</span>\\r\\n    </h3>\\r\\n    <a class=\\\"transform  top-0 right-0 translate-x-8 scale-75\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"\\r\\n    href=\\\"https://www.buymeacoffee.com/kushteam\\\"><img\\r\\n    src=\\\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=kushteam&button_colour=FFDD00&font_colour=000000&font_family=Cookie&outline_colour=000000&coffee_colour=ffffff\\\"></a>\\r\\n    <app-login *ngIf=\\\"!storageService.isAuthenticated()\\\"></app-login>\\r\\n    <a *ngIf=\\\"storageService.isAuthenticated()\\\" (click)=\\\"storageService.logout()\\\">Logout </a>\\r\\n  </div>\\r\\n  <div class=\\\"flex overflow-hidden relative\\\">\\r\\n    <div class=\\\"w-1/2 border-r-2 border-green-500\\\">\\r\\n      <app-playground [theme]=\\\"theme\\\" [themes]=\\\"themeList\\\"></app-playground>\\r\\n    </div>\\r\\n    <div class=\\\"w-1/2 overflow-y-auto relative max-h-screen relative\\\">\\r\\n      <app-landing [query]=\\\"theme.landingQuery\\\" [stringTemplate]=\\\"theme.landingTemplate\\\"></app-landing>\\r\\n      <app-articles [query]=\\\"theme.articlesQuery\\\" [stringTemplate]=\\\"theme.articlesTemplate\\\"></app-articles>\\r\\n      <app-article [query]=\\\"theme.articleQuery\\\" [stringTemplate]=\\\"theme.articleTemplate\\\"></app-article>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"\";","import { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PlaygroundService {\n\n\n  public fileChanged:EventEmitter<any> = new EventEmitter();\n\n  private currentKey: string;\n  private currentLanguage: string;\n\n  constructor() { }\n\n  public setFile(key:string, language:string): void {\n    this.currentKey = key;\n    this.currentLanguage = language;\n    this.fileChanged.emit({key: this.currentKey, language: this.currentLanguage});\n  }\n}\n","import { PlaygroundService } from './../playground.service';\nimport { Component, Input, KeyValueDiffer, KeyValueDiffers, OnInit } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Theme } from '../models/theme';\nimport { StorageService } from '../storage.service';\nimport { ThemeService } from '../theme.service';\n\n@Component({\n  selector: 'app-playground',\n  templateUrl: './playground.component.html',\n  styleUrls: ['./playground.component.scss']\n})\n\nexport class PlaygroundComponent implements OnInit {\n  @Input() theme!:Theme;\n  @Input() themes!:Theme[];\n\n  public code!:string;\n  private differ: KeyValueDiffer<string, any>;\n\n  public editorOptions = {theme: 'vs-dark', language: 'graphql'};\n  private key:string = \"\";\n  public themeID: string;\n\n  private UPDATE_THEME:DocumentNode = gql`\n    mutation UpdateTheme($id: ID!, $theme: ThemeInput!) {\n      UpdateTheme(id: $id, Theme: $theme) {\n        message\n        status\n        data {\n          id\n          name\n        }\n      }\n    }\n  `;\n\n  private CREATE_THEME:DocumentNode = gql`\n    mutation CreateTheme($theme: ThemeInput!) {\n      CreateTheme(Theme: $theme) {\n        message\n        status\n        data {\n          id\n          name\n          landingQuery\n          landingTemplate\n          articleQuery\n          articleTemplate\n          articlesQuery\n          articlesTemplate\n        }\n      }\n    }\n  `;\n\n  constructor(\n    private differs: KeyValueDiffers,\n    private apollo: Apollo,\n    private playgroundService: PlaygroundService,\n    public storageService:StorageService,\n    private themeService:ThemeService) {\n      this.differ = this.differs.find({}).create();\n  }\n\n  ngOnInit(): void {\n    this.themeID = this.theme.id;\n    this.playgroundService.fileChanged.subscribe(\n      (data:any) => {\n        this.key = data.key;\n        this.code = this.theme.getPropertyByName(this.key);\n        this.editorOptions = {theme: 'vs-dark', language: data.language};\n      }\n    );\n  }\n\n\n\n\n  ngDoCheck() {\n    const change = this.differ.diff(this);\n    if (change) {\n      change.forEachChangedItem(item => {\n        if (item.key == \"theme\") {\n          this.code = this.theme.getPropertyByName(this.key);\n        }\n        if (item.key == \"code\") {\n          this.theme.setPropertyByName(this.key, item.currentValue);\n        }\n      });\n    }\n  }\n\n  public setFile(key:string, language:string): void {\n    this.playgroundService.setFile(key, language);\n  }\n\n  public themeSelected(): void {\n    if (this.theme.id != this.themeID) {\n      let theme = this.themes.filter(t => t.id === this.themeID)[0];\n      this.themeService.setTheme(theme);\n    }\n  }\n\n  public saveTheme(): void {\n    let theme = {\n      name : this.theme.name,\n      landingTemplate : this.theme.landingTemplate,\n      landingQuery : this.theme.landingQuery,\n      articlesTemplate : this.theme.articlesTemplate,\n      articlesQuery : this.theme.articlesQuery,\n      articleTemplate : this.theme.articleTemplate,\n      articleQuery : this.theme.articleQuery,\n      authorID: this.theme.author.id\n    };\n\n    this.apollo.mutate({\n      mutation: this.UPDATE_THEME,\n      variables: {\n        id: this.theme.id,\n        theme: theme\n      }\n    }).subscribe(({ data }) => {\n      //console.log('got data', data);\n    },(error) => {\n      //console.log('there was an error sending the query', error);\n    });\n  }\n\n  public cloneTheme(): void {\n    let theme = {\n      name : prompt(\"Please enter theme name\", `${this.theme.name} cloned`),\n      landingTemplate : this.theme.landingTemplate,\n      landingQuery : this.theme.landingQuery,\n      articlesTemplate : this.theme.articlesTemplate,\n      articlesQuery : this.theme.articlesQuery,\n      articleTemplate : this.theme.articleTemplate,\n      articleQuery : this.theme.articleQuery,\n      authorID: this.storageService.getCurrentUser().id\n    };\n\n    this.apollo.mutate({\n      mutation: this.CREATE_THEME,\n      variables: {\n        theme: theme\n      }\n    }).subscribe((data:any) => {\n      this.theme = Theme.CopyFrom(data.data.CreateTheme.data);\n      this.themes.push(this.theme);\n    },(error) => {\n      //console.log('there was an error sending the query', error);\n    });\n  }\n}\n","export default \"<div class=\\\"flex flex-col font-mono relative\\\">\\r\\n  <button *ngIf=\\\"storageService.isAuthenticated() && storageService.getCurrentUser().id == theme.author.id\\\"\\r\\n    class=\\\"z-50 bg-green-500 absolute hover:bg-green-600 transition-all duration-500 right-0 top-0 transform rounded-none px-4 py-1 font-bold text-white\\\"\\r\\n    (click)=\\\"saveTheme()\\\">Save\\r\\n  </button>\\r\\n\\r\\n  <button *ngIf=\\\"storageService.isAuthenticated() && storageService.getCurrentUser().id != theme.author.id\\\"\\r\\n    class=\\\"z-50 bg-green-500 absolute hover:bg-green-600 transition-all duration-500 right-0 top-0 transform rounded-none px-4 py-1 font-bold text-white\\\"\\r\\n    (click)=\\\"cloneTheme()\\\">Clone\\r\\n  </button>\\r\\n\\r\\n  <div class=\\\"shadow-lg delay-150 border-r-2 border-orange-500 left-0 pt-2 top-0 bottom-0 absolute w-64  bg-gray-900 text-white font-mono z-40 transform duration-1000 transition-all -translate-x-56 hover:translate-x-0\\\">\\r\\n    <div class=\\\"absolute right-0 top-0 transform translate-x-16 bg-orange-500 px-6 py-1 font-bold flex\\\">\\r\\n      <span class=\\\"transform transition-all inline-block rotate-90 font-sans mr-2\\\">\\r\\n        III\\r\\n      </span>\\r\\n      Data\\r\\n    </div>\\r\\n    <h1>\\r\\n      <label class=\\\"block mt-4\\\">\\r\\n        <select class=\\\"form-select mt-1 block w-full bg-gray-900\\\" [(ngModel)]=\\\"themeID\\\" (change)=\\\"themeSelected()\\\">\\r\\n          <option *ngFor=\\\"let t of themes\\\" [value]=\\\"t.id\\\">{{t.name}} by <small>{{t.author.username}}</small></option>\\r\\n        </select>\\r\\n      </label>\\r\\n    </h1>\\r\\n    <div class=\\\"space-y-3 text-sm\\\">\\r\\n      <div>\\r\\n        <h4 class=\\\"my-6 font-bold pl-4\\\">Querys</h4>\\r\\n        <div class=\\\" space-y-3\\\">\\r\\n          <div class=\\\"pl-4 border-b border-orange-500 hover:text-orange-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('landingQuery', 'graphql')\\\">\\r\\n            landing<span class=\\\"text-orange-500\\\">.graphql</span>\\r\\n          </div>\\r\\n          <div class=\\\"pl-4 border-b border-orange-500 hover:text-orange-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('articlesQuery', 'graphql')\\\">\\r\\n            articles<span class=\\\"text-orange-500\\\">.graphql</span>\\r\\n          </div>\\r\\n          <div class=\\\"pl-4 border-b border-orange-500 hover:text-orange-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('articleQuery', 'graphql')\\\">\\r\\n            article<span class=\\\"text-orange-500\\\">.graphql</span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"mt-3\\\">\\r\\n        <h4 class=\\\"my-12 mb-3 pl-4 font-bold\\\">Templates</h4>\\r\\n        <div class=\\\"space-y-3\\\">\\r\\n          <div class=\\\"pl-4 border-b border-blue-500 hover:text-blue-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('landingTemplate', 'html')\\\">\\r\\n            landing<span class=\\\"text-blue-500\\\">.html</span>\\r\\n          </div>\\r\\n          <div class=\\\"pl-4 border-b border-blue-500 hover:text-blue-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('articlesTemplate', 'html')\\\">\\r\\n            articles<span class=\\\"text-blue-500\\\">.html</span>\\r\\n          </div>\\r\\n          <div class=\\\"pl-4 border-b border-blue-500 hover:text-blue-300 font-bold cursor-pointer\\\"\\r\\n            (click)=\\\"setFile('articleTemplate', 'html')\\\">\\r\\n            article<span class=\\\"text-blue-500\\\">.html</span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"w-full pt-8 bg-gray-900  pl-6 h-screen\\\" style=\\\"padding-top: 2.2rem;  background: #1e1e1e;\\\">\\r\\n    <ngx-monaco-editor style=\\\"height: 100%; width: 100%;\\\" [options]=\\\"editorOptions\\\" [(ngModel)]=\\\"code\\\"></ngx-monaco-editor>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"\";","import { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArticlesService {\n  public articleChanged:EventEmitter<any> = new EventEmitter();\n\n  private currentArticleID: string;\n\n  constructor() { }\n\n  public setArticle(articleID: string): void {\n    this.currentArticleID = articleID;\n    this.articleChanged.emit(articleID);\n  }\n}\n","export class Category {\n\n  static CopyFrom(category: any): Category {\n    let _category = new Category();\n    _category.id = category.id;\n    _category.name = category.name;\n    return _category;\n  }\n\n  public id!: string;\n  public name!: string;\n}\n","import { Category } from './category';\nimport { Author } from './author';\n\nexport class Article {\n\n  static CopyFrom(article: any):Article {\n    let _article = new Article();\n\n    _article.id = article.id;\n    _article.title = article.title;\n    _article.content = article.content;\n    _article.brief = article.brief;\n    _article.createdAt = article.createdAt;\n\n    if (article.author) {\n      _article.author = Author.CopyFrom(article.author);\n    }\n    if (article.category) {\n      _article.category = Category.CopyFrom(article.category);\n    }\n\n    return _article;\n  }\n\n  public id!:string;\n  public title!:string;\n  public content!:string;\n  public brief!: string;\n  public createdAt!: string;\n  public author!:Author;\n  public category!:Category;\n}\n","import { ArticlesService } from './../articles.service';\nimport { Article } from './../models/article';\nimport { Component, Input, OnInit } from '@angular/core';\nimport {Apollo, gql} from 'apollo-angular';\nimport { PlaygroundService } from '../playground.service';\n\n@Component({\n  selector: 'app-articles',\n  templateUrl: './articles.component.html',\n  styleUrls: ['./articles.component.scss']\n})\nexport class ArticlesComponent implements OnInit {\n\n  @Input() stringTemplate!:string;\n  @Input() query!:string;\n\n  public articles!: Article[];\n  public loading = true;\n  public error: any;\n\n  constructor(private apollo: Apollo, private playgroundService: PlaygroundService, private articleService: ArticlesService) { }\n\n  public setFile(key:string, language:string): void {\n    this.playgroundService.setFile(key, language);\n  }\n\n  public setArticle(articleID: string) : void {\n    this.articleService.setArticle(articleID);\n  }\n\n  ngOnChanges() {\n    this.apollo\n      .watchQuery({\n        query: gql(this.query),\n      })\n      .valueChanges.subscribe((result: any) => {\n        this.articles = (result?.data[Object.keys(result?.data)[0]].dataList).map((article:any) => { return Article.CopyFrom(article)}) ;\n        this.loading = result.loading;\n        this.error = result.error;\n      });\n  }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","export default \"<ng-container *compile=\\\"stringTemplate; context: { setFile: this.setFile, setArticle: this.setArticle, articles: articles }\\\"></ng-container>\\n\";","export default \"\";","import { Component, Input, OnInit } from '@angular/core';\nimport { PlaygroundService } from '../playground.service';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent implements OnInit {\n\n  @Input() stringTemplate!:string;\n  @Input() query!:string;\n\n  constructor(private playground: PlaygroundService) { }\n\n  ngOnInit(): void {\n  }\n\n  public setFile(key:string, language:string): void {\n    this.playground.setFile(key, language);\n  }\n}\n","export default \"<ng-container *compile=\\\"stringTemplate; context: { }\\\"></ng-container>\\n\";","export default \"\";","import {NgModule} from '@angular/core';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular/http';\nimport { split, ApolloClientOptions, InMemoryCache } from '@apollo/client/core';\nimport {WebSocketLink} from '@apollo/client/link/ws';\nimport {getMainDefinition} from '@apollo/client/utilities';\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory(httpLink: HttpLink): ApolloClientOptions<any> {\n        // Create an http link:\n        const http = httpLink.create({\n          uri: 'https://kush-team.dev/graphql',\n        });\n\n        // Create a WebSocket link:\n        const ws = new WebSocketLink({\n          uri: `wss://kush-team.dev/graphql`,\n          options: {\n            reconnect: true,\n          },\n        });\n\n        // using the ability to split links, you can send data to each link\n        // depending on what kind of operation is being sent\n        const link = split(\n          // split based on operation type\n          ({ query }) => {\n            let definition = getMainDefinition(query);\n            return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n          },\n          ws,\n          http,\n        );\n\n        return {\n          cache: new InMemoryCache(),\n          link,\n          // ... options\n        };\n      },\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","import { ArticlesService } from './../articles.service';\nimport { Article } from './../models/article';\nimport { Component, Input, OnInit } from '@angular/core';\nimport {Apollo, gql} from 'apollo-angular';\nimport { PlaygroundService } from '../playground.service';\n\n@Component({\n  selector: 'app-article',\n  templateUrl: './article.component.html',\n  styleUrls: ['./article.component.scss']\n})\nexport class ArticleComponent implements OnInit {\n\n  @Input() stringTemplate!:string;\n  @Input() query!:string;\n\n  public article!: Article;\n  public loading = true;\n  public error: any;\n\n  private articleID:string;\n\n\n  constructor(private apollo: Apollo, private playgroundService: PlaygroundService, private articlesService: ArticlesService) { }\n\n  public setFile(key:string, language:string): void {\n    this.playgroundService.setFile(key, language);\n  }\n\n  ngOnInit() {\n    this.articlesService.articleChanged.subscribe(\n      (articleID:string) => {\n        this.articleID = articleID;\n        this.getArticle();\n      }\n    );\n  }\n\n  ngOnChanges(): void {\n    if (this.articleID) {\n      this.getArticle();\n    }\n  }\n\n  private getArticle(): void {\n    this.apollo\n      .watchQuery({\n        query: gql(this.query),\n        variables: {\n          id: this.articleID\n        }\n      })\n      .valueChanges.subscribe((result: any) => {\n        this.article = Article.CopyFrom(result?.data[Object.keys(result?.data)[0]].data);\n        this.loading = result.loading;\n        this.error = result.error;\n      });\n  }\n\n}\n","export default \"<ng-container *compile=\\\"stringTemplate; context: { setFile: this.setFile, article: article }\\\"></ng-container>\\n\";","export default \"\";","import { CommonModule } from \"@angular/common\";\nimport { Compiler, Component, ComponentRef, CUSTOM_ELEMENTS_SCHEMA, Directive, Input, ModuleWithComponentFactories, NgModule, OnChanges, Type, ViewContainerRef } from \"@angular/core\";\nimport { ArticlesService } from \"./articles.service\";\nimport { PlaygroundService } from \"./playground.service\";\n\n@Directive({\n  selector: '[compile]'\n})\n\nexport class CompileDirective implements OnChanges {\n  @Input() compile: string = \"\";\n  @Input() compileContext: any;\n\n  public compRef!: ComponentRef<any>;\n\n  constructor(private vcRef: ViewContainerRef, private compiler: Compiler) {}\n\n  ngOnChanges() {\n    if(!this.compile) {\n      if(this.compRef) {\n        this.updateProperties();\n        return;\n      }\n      throw Error('You forgot to provide template');\n    }\n\n    this.vcRef.clear();\n    //this.compRef = null;\n\n    const component = this.createDynamicComponent(this.compile);\n    const module = this.createDynamicModule(component);\n\n    this.compiler.compileModuleAndAllComponentsAsync(module)\n      .then((moduleWithFactories: ModuleWithComponentFactories<any>) => {\n        let compFactory = moduleWithFactories.componentFactories.find(x => x.componentType === component);\n        if (compFactory) {\n          this.compRef = this.vcRef.createComponent(compFactory);\n        }\n        this.updateProperties();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  updateProperties() {\n    for(var prop in this.compileContext) {\n      this.compRef.instance[prop] = this.compileContext[prop];\n    }\n  }\n\n  private createDynamicComponent (template:string) {\n    @Component({\n      selector: 'custom-dynamic-component',\n      template: template,\n    })\n    class CustomDynamicComponent {\n      constructor(private playgroundService: PlaygroundService, private articleService: ArticlesService) {}\n    }\n    return CustomDynamicComponent;\n  }\n\n\n  private createDynamicModule (component: Type<any>) {\n    @NgModule({\n      imports: [CommonModule],\n      declarations: [component],\n      schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\n      providers: [PlaygroundService, ArticlesService]\n    })\n    class DynamicModule {}\n    return DynamicModule;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { StorageService } from \"./storage.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private router: Router,\n    private storageService: StorageService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n\n    let request = req;\n\n    if (this.storageService.isAuthenticated()) {\n      request = req.clone({\n        setHeaders: {\n          authorization: `${ this.storageService.getCurrentToken() }`\n        }\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((err: HttpErrorResponse) => {\n\n        if (err.status === 401) {\n          this.router.navigateByUrl('/login');\n        }\n\n        return throwError( err );\n\n      })\n    );\n  }\n\n}\n","import { Apollo, gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Session } from './models/session';\nimport { User } from './models/user';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthenticationService {\n\n  constructor(private apollo: Apollo) { }\n\n  private LOGIN_MUTATION:DocumentNode = gql`\n    mutation Login($emailAddress: String!, $password: String!) {\n      Login(emailAddress: $emailAddress, password: $password) {\n        message\n        status\n        token\n        user {\n          id\n          username\n          emailAddress\n          role\n        }\n      }\n    }\n  `;\n\n  login(emailAddress: string, password: string): Observable<any> {\n    return this.apollo.mutate({\n      mutation: this.LOGIN_MUTATION,\n      variables: {\n        emailAddress: emailAddress,\n        password: password\n      }\n    })\n  }\n\n}\n","import { User } from \"./user\";\n\nexport class Session {\n\tpublic token: string;\n\tpublic user: User;\n\tconstructor(token: string, user: User) {\n\t\tthis.token = token;\n\t\tthis.user = user;\n\t}\n}\n","export class User {\n    public id: string;\n    public fullName: string;\n    public emailAddress: string;\n    public role: string;\n\n    constructor (id: string, fullName: string, emailAddress: string, role: string) {\n    \tthis.id = id;\n    \tthis.fullName = fullName;\n      this.emailAddress = emailAddress;\n      this.role = role;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../authentication.service';\nimport { StorageService } from '../storage.service';\nimport { Session } from '../models/session';\nimport { User } from '../models/user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm: FormGroup;\n  public submitted: boolean;\n  public error: {code: number, message: string} = {code: 0, message: ''};\n\n  constructor(private formBuilder: FormBuilder,\n              private authenticationService: AuthenticationService,\n              private storageService: StorageService) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      emailAddress: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  public login(): void {\n    this.submitted = true;\n    this.error = null;\n\n    if (this.loginForm.valid){\n      this.authenticationService.login(this.loginForm.value.emailAddress, this.loginForm.value.password).subscribe(\n        data => this.correctLogin(data.data.Login),\n        error => this.error = JSON.parse(error._body)\n      );\n    }\n  }\n\n\n  private correctLogin(data: any): void {\n    this.storageService.setCurrentSession(new Session(data.token, new User(data.user.id, data.user.fullName, data.user.emailAddress, data.user.role)));\n  }\n\n}\n","export default \"<form  id=\\\"login-form\\\" #lForm=\\\"ngForm\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\" novalidate class=\\\"w-full max-w-sm\\\">\\n  <div class=\\\"flex items-center border-b border-b-2 border-green-800 py-2\\\">\\n    <input matInput type=\\\"text\\\" formControlName=\\\"emailAddress\\\" placeholder=\\\"Email\\\"\\n      class=\\\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\\\"\\n    >\\n    <input matInput type=\\\"password\\\" formControlName=\\\"password\\\" autocomplete=\\\"current-password\\\" required\\n      class=\\\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\\\"\\n      placeholder=\\\"Password\\\">\\n\\n    <button mat-raised-button type=\\\"submit\\\" form=\\\"login-form\\\" [disabled]=\\\"!loginForm.valid\\\"\\n      class=\\\"flex-shrink-0 bg-green-800 hover:bg-green-700 border-green-800 hover:border-green-700 text-sm border-4 text-white py-1 px-2 rounded\\\">\\n      Sign In\\n    </button>\\n  </div>\\n</form>\\n\";","export default \"\";","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PlaygroundComponent } from './playground/playground.component';\nimport { ArticlesComponent } from './articles/articles.component';\nimport { LandingComponent } from './landing/landing.component';\nimport { MonacoEditorModule } from 'ngx-monaco-editor';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { GraphQLModule } from './graphql.module';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ArticleComponent } from './article/article.component';\nimport { CompileDirective } from './compile.directive';\nimport { AuthInterceptor } from './auth.interceptor';\nimport { LoginComponent } from './login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PlaygroundComponent,\n    ArticlesComponent,\n    LandingComponent,\n    ArticleComponent,\n    CompileDirective,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    MonacoEditorModule.forRoot(),\n    GraphQLModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    },\n  ],\n  bootstrap: [AppComponent]\n})\n\n\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport \"@angular/compiler\"\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}